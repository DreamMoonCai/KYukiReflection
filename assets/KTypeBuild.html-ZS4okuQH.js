import{_ as s,o as a,c as n,a as e}from"./app-8qBaMd0v.js";const o={},l=e(`<h1 id="ktypebuild-class" tabindex="-1"><a class="header-anchor" href="#ktypebuild-class" aria-hidden="true">#</a> KTypeBuild <span class="symbol">- class</span></h1><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KTypeBuild</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">internal</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">constructor</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> classSet: </span><span style="color:#F69D50;">KClassifier</span><span style="color:#ADBAC7;">) : </span><span style="color:#F69D50;">KBaseFinder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p><code>KType</code> 构建实现类。</p></blockquote><h2 id="isnullable-field" tabindex="-1"><a class="header-anchor" href="#isnullable-field" aria-hidden="true">#</a> isNullable <span class="symbol">- field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> isNullable: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>设置 <code>KType</code> 是否可以为空。</p></blockquote><h2 id="paramcount-field" tabindex="-1"><a class="header-anchor" href="#paramcount-field" aria-hidden="true">#</a> paramCount <span class="symbol">- field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> paramCount: </span><span style="color:#F69D50;">Int</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>设置 <code>KType</code> 泛型参数个数。</p></blockquote><p>你可以不使用 <code>param</code> 指定参数类型而是仅使用此变量指定参数个数</p><p>若参数个数小于零则忽略并使用 <code>param</code></p><div class="custom-container danger"><p class="custom-container-title">特别注意</p><p>未指定类型的泛型将使用星射代替 <code>KTypeProjection.STAR</code></p></div><h2 id="emptyparam-method" tabindex="-1"><a class="header-anchor" href="#emptyparam-method" aria-hidden="true">#</a> emptyParam <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">emptyParam</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>设置 <code>KType</code> 的泛型为空参数、无参数。</p></blockquote><h2 id="param-method" tabindex="-1"><a class="header-anchor" href="#param-method" aria-hidden="true">#</a> param <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">param</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> paramType: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>设置 <code>KType</code> 泛型参数。</p></blockquote><p>如果同时使用了 <code>paramCount</code> 则 <code>paramType</code> 的数量必须小于或等于 <code>paramCount</code> 个数，多余未设置的类型将使用星射代替 <code>KTypeProjection.STAR</code></p><p>你同样可以在 <code>KType</code> 中使用<a href="../../../type/defined/KDefinedTypeFactory#vaguekotlin-field">VagueKotlin</a> - 它与<code>KTypeProjection.STAR</code>等价</p><div class="custom-container danger"><p class="custom-container-title">特别注意</p><p>无泛型 <code>KType</code> 请使用 <code>emptyParam</code> 设置没有泛型参数</p><p>有泛型 <code>KType</code> 未指定的泛型将使用星射代替 <code>KTypeProjection.STAR</code></p></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">生成List</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Int,String,</span><span style="color:#F47067;">*&gt;</span><span style="color:#ADBAC7;">尽管这不合理，因为泛型数量必须与基类能承受的数量一致</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>此时就可以简单地写作 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">param</span><span style="color:#ADBAC7;">(Int::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">, String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">,VagueKotlin)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="addparam-method" tabindex="-1"><a class="header-anchor" href="#addparam-method" aria-hidden="true">#</a> addParam <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">addParam</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> paramType: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>增加 <code>KType</code> 泛型参数 - 你需要谨慎使用此方法，因为常常默认泛型组中包含的是所有星射，此方法会同步增加 <code>paramCount</code>,你往往不需要去增加泛型参数数量他们应该在源码就固定了,因此你可能需要先 <code>emptyParam</code></p></blockquote><p>如果同时使用了 <code>paramCount</code> 则 <code>paramType</code> 的数量必须小于或等于 <code>paramCount</code> 个数，多余未设置的类型将使用星射代替 <code>KTypeProjection.STAR</code></p><p>你同样可以在 <code>KType</code> 中使用<a href="../../../type/defined/KDefinedTypeFactory#vaguekotlin-field">VagueKotlin</a> - 它与<code>KTypeProjection.STAR</code>等价</p><div class="custom-container danger"><p class="custom-container-title">特别注意</p><p>无泛型 <code>KType</code> 请使用 <code>emptyParam</code> 设置没有泛型参数</p><p>有泛型 <code>KType</code> 未指定的泛型将使用星射代替 <code>KTypeProjection.STAR</code></p></div><blockquote><p>例如下面这个参数类型结构 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">生成List</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Int,String,</span><span style="color:#F47067;">*&gt;</span><span style="color:#ADBAC7;">尽管这不合理，因为泛型数量必须与基类能承受的数量一致</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>此时就可以简单地写作 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">addParam</span><span style="color:#ADBAC7;">(Int::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">addParam</span><span style="color:#ADBAC7;">(String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">addParam</span><span style="color:#ADBAC7;">(VagueKotlin)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setparam-method" tabindex="-1"><a class="header-anchor" href="#setparam-method" aria-hidden="true">#</a> setParam <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setParam</span><span style="color:#ADBAC7;">(index: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,paramType: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>设置 <code>KType</code> 泛型参数</p></blockquote><p>你同样可以在 <code>KType</code> 中使用<a href="../../../type/defined/KDefinedTypeFactory#vaguekotlin-field">VagueKotlin</a> - 它与<code>KTypeProjection.STAR</code>等价</p><div class="custom-container danger"><p class="custom-container-title">特别注意</p><p>无泛型 <code>KType</code> 请使用 <code>emptyParam</code> 设置没有泛型参数</p><p>有泛型 <code>KType</code> 未指定的泛型将使用星射代替 <code>KTypeProjection.STAR</code></p></div><blockquote><p>例如下面这个参数类型结构 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">将List</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">设置为 </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> List</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String,</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">,Int</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> 尽管这不合理，因为泛型数量必须与基类能承受的数量一致</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>此时就可以简单地写作 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">setParam</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,Int::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">setParam</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">,String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">setParam</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,VagueKotlin)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setstarparam-method" tabindex="-1"><a class="header-anchor" href="#setstarparam-method" aria-hidden="true">#</a> setStarParam <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setStarParam</span><span style="color:#ADBAC7;">(paramType: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setStarParam</span><span style="color:#ADBAC7;">(index: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,paramType: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>设置 <code>KType</code> 星射泛型参数为指定类型</p></blockquote><div class="custom-container danger"><p class="custom-container-title">特别注意</p><p>设置从最初元素开始的第<code>index</code>个星射<code>KTypeProjection.STAR</code>为指定泛型参数，<code>index</code>默认为0</p></div><p>你同样可以在 <code>KType</code> 中使用<a href="../../../type/defined/KDefinedTypeFactory#vaguekotlin-field">VagueKotlin</a> - 它与<code>KTypeProjection.STAR</code>等价</p><div class="custom-container danger"><p class="custom-container-title">特别注意</p><p>如果没有任何星射泛型则此操作等同于<code>setParam</code></p><p>有泛型 <code>KType</code> 未指定的泛型将使用星射代替<code>KTypeProjection.STAR</code></p></div><blockquote><p>例如下面这个参数类型结构 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">为填补星射参数List</span><span style="color:#F47067;">&lt;*</span><span style="color:#ADBAC7;">,String,</span><span style="color:#F47067;">*&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> List</span><span style="color:#F47067;">&lt;*</span><span style="color:#ADBAC7;">,String,Int</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> 尽管这不合理，因为泛型数量必须与基类能承受的数量一致</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>此时就可以简单地写作 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">setStarParam</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,Int::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="setvariance-method" tabindex="-1"><a class="header-anchor" href="#setvariance-method" aria-hidden="true">#</a> setVariance <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setVariance</span><span style="color:#ADBAC7;">(index: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,variance: </span><span style="color:#F69D50;">KVariance</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>设置 <code>KType</code> 泛型参数的方差</p></blockquote><p>你同样可以在 <code>KType</code> 中使用<a href="../../../type/defined/KDefinedTypeFactory#vaguekotlin-field">VagueKotlin</a> - 它与<code>KVariance.INVARIANT</code>等价</p><blockquote><p>例如下面这个参数类型结构 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">为泛型参数设置方差List</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Int,</span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> String,Int</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> List</span><span style="color:#F47067;">&lt;in</span><span style="color:#ADBAC7;"> Int,String,out Int</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> 尽管这不合理，因为泛型数量必须与基类能承受的数量一致</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>此时就可以简单地写作 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">setVariance</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">,KVariance.IN)</span></span>
<span class="line"><span style="color:#DCBDFB;">setVariance</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,VagueKotlin)</span></span>
<span class="line"><span style="color:#DCBDFB;">setVariance</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,KVariance.OUT)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="annotations-method" tabindex="-1"><a class="header-anchor" href="#annotations-method" aria-hidden="true">#</a> annotations <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">annotations</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> annotations: </span><span style="color:#F69D50;">Annotation</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">addAnnotation</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">annotation</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">Annotation</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>设置 <code>KType</code> 注解</p></blockquote><blockquote><p>例如下面这个参数类型结构 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> abc:</span><span style="color:#F69D50;">@UnsafeVariance</span><span style="color:#ADBAC7;"> Int</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>此时就可以简单地写作 ↓</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">classSet </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Int::</span><span style="color:#DCBDFB;">class</span></span>
<span class="line"><span style="color:#DCBDFB;">addAnnotation</span><span style="color:#ADBAC7;">(UnsafeVariance::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="result-class" tabindex="-1"><a class="header-anchor" href="#result-class" aria-hidden="true">#</a> Result <span class="symbol">- class</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">inner</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Result</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">internal</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">constructor</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">internal</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isNoSuch: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">internal</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> throwable: </span><span style="color:#F69D50;">Throwable</span><span style="color:#ADBAC7;">?) : </span><span style="color:#F69D50;">BaseResult</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p><code>KType</code> 构建结果实现类。</p></blockquote><h3 id="result-method" tabindex="-1"><a class="header-anchor" href="#result-method" aria-hidden="true">#</a> result <span class="symbol">- method</span></h3><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">inline</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">result</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">Result</span><span style="color:#ADBAC7;">.() </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit): </span><span style="color:#F69D50;">Result</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>创建监听结果事件方法体。</p></blockquote><p><strong>功能示例</strong></p><p>你可以使用 <strong>lambda</strong> 形式创建 <code>Result</code> 类。</p><h3 id="result-method-1" tabindex="-1"><a class="header-anchor" href="#result-method-1" aria-hidden="true">#</a> result <span class="symbol">- method</span></h3><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">inline</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">result</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">Result</span><span style="color:#ADBAC7;">.() </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit): </span><span style="color:#F69D50;">Result</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>创建监听结果事件方法体。</p></blockquote><p><strong>功能示例</strong></p><p>你可以使用 <strong>lambda</strong> 形式创建 <code>Result</code> 类。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">constructor</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">result</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">get</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">call</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">all</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">remedys</span><span style="color:#ADBAC7;"> {}</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onNoSuchConstructor</span><span style="color:#ADBAC7;"> {}</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-method" tabindex="-1"><a class="header-anchor" href="#get-method" aria-hidden="true">#</a> get <span class="symbol">- method</span></h3><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(): </span><span style="color:#F69D50;">Instance</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获得 <code>KType</code> 实例处理类。</p></blockquote>`,130),p=[l];function c(t,r){return a(),n("div",null,p)}const i=s(o,[["render",c],["__file","KTypeBuild.html.vue"]]);export{i as default};
