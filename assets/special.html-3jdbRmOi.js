import{_ as s,o as n,c as a,a as l}from"./app-8qBaMd0v.js";const p={},o=l(`<h1 id="特色功能" tabindex="-1"><a class="header-anchor" href="#特色功能" aria-hidden="true">#</a> 特色功能</h1><blockquote><p>这里包含了 <code>KYukiReflection</code> 区别于 <code>YukiReflection</code> 全部特色功能的用法示例。</p></blockquote><h2 id="强力泛型技巧" tabindex="-1"><a class="header-anchor" href="#强力泛型技巧" aria-hidden="true">#</a> 强力泛型技巧</h2><blockquote><p>这里是关于 Kotlin 泛型的一些拓展功能和介绍。</p></blockquote><h3 id="获取泛型信息" tabindex="-1"><a class="header-anchor" href="#获取泛型信息" aria-hidden="true">#</a> 获取泛型信息</h3><p>使用 <code>KYukiReflection</code> 可以轻松获取各种泛型信息包括 <code>属性类型</code>、<code>参数类型</code>、<code>函数返回类型</code>、<code>拓展this泛型类型</code>等，非局部的各式泛型信息...</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">open</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">B</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Test</span><span style="color:#ADBAC7;"> :</span><span style="color:#F69D50;">B</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Thread</span><span style="color:#ADBAC7;">&gt;() {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">lateinit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> list: </span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">lateinit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> map: </span><span style="color:#F69D50;">Map</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Short</span><span style="color:#ADBAC7;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">B</span><span style="color:#ADBAC7;">:</span><span style="color:#F69D50;">Double</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">List</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Int</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">(one:</span><span style="color:#F69D50;">Set</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Number</span><span style="color:#ADBAC7;">&gt;):</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Char</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">listOf</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">//获取B中的Thread</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">genericSuper</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">()</span><span style="color:#768390;">//默认 index = 0 获取第一个泛型结果为 Thread</span></span>
<span class="line"><span style="color:#768390;">//获取list: List&lt;String&gt;中的 String</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;list&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KProperty，generic默认获取返回类型的泛型对象</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">list</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//直接引用获取，以下例子同理</span></span>
<span class="line"><span style="color:#768390;">//获取map: Map&lt;String,List&lt;Short&gt;&gt;中的 Short</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;map&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">).</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KProperty，generic默认获取返回类型的泛型对象，获取index = 1的泛型对象并获取最终对象的第一个类型</span></span>
<span class="line"><span style="color:#768390;">//获取test(one:Set&lt;Number&gt;)中的Number</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;test&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.parameters.</span><span style="color:#DCBDFB;">first</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KFunction，通过parameters获取首个参数，并获取泛型对象拿到第一个泛型</span></span>
<span class="line"><span style="color:#768390;">//获取test(one:Set&lt;Number&gt;):List&lt;Char&gt;中的Char</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;test&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KFunction，generic默认获取返回类型的泛型对象</span></span>
<span class="line"><span style="color:#768390;">//获取List&lt;Int&gt;.test(one:Set&lt;Number&gt;)中的Int</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;test&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.instanceParameter</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KFunction，通过instanceParameter获取拓展实例参数，并获取泛型对象拿到第一个泛型</span></span>
<span class="line"><span style="color:#768390;">//获取fun &lt;B:Double&gt; List&lt;Int&gt;.test中的Double</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;test&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generics</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KFunction，generics获取定义参数泛型列表并默认获取上界的类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述方法可以获取任意位置存在的泛型信息</p><p>这在Java类上也同样适用</p><blockquote><p>假设有以下反编译看到的类</p></blockquote><div class="language-java" data-ext="java"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.List;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.Map;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.Set;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">B</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">T</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Test</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">B</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Thread</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">list;</span></span>
<span class="line"><span style="color:#ADBAC7;">    Map</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">, </span><span style="color:#ADBAC7;">List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Short</span><span style="color:#F69D50;">&gt;&gt; </span><span style="color:#ADBAC7;">map;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#F47067;">T</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">Double</span><span style="color:#ADBAC7;">&gt; List&lt;</span><span style="color:#F47067;">Character</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">(Set&lt;</span><span style="color:#F47067;">Number</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">one</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre></div><p>反编译能看到这些泛型说明这些泛型信息被保留了，我们可以使用 <code>KYukiReflection</code> 进行反射</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">//获取B中的Thread</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">genericSuper</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">()</span><span style="color:#768390;">//默认 index = 0 获取第一个泛型结果为 Thread</span></span>
<span class="line"><span style="color:#768390;">//获取List&lt;String&gt; list;中的 String</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;list&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KProperty，generic默认获取返回类型的泛型对象</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">list</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//直接引用获取，以下例子同理</span></span>
<span class="line"><span style="color:#768390;">//获取Map&lt;String, List&lt;Short&gt;&gt; map;中的 Short</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;map&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">).</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KProperty，generic默认获取返回类型的泛型对象，获取index = 1的泛型对象并获取最终对象的第一个类型</span></span>
<span class="line"><span style="color:#768390;">//获取test(Set&lt;Number&gt; one)中的Number</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;test&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.parameters.</span><span style="color:#DCBDFB;">first</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KFunction，通过parameters选定参数，并获取泛型对象拿到第一个泛型</span></span>
<span class="line"><span style="color:#768390;">//获取List&lt;Character&gt; test(Set&lt;Number&gt; one)中的Char</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;test&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KFunction，generic默认获取返回类型的泛型对象</span></span>
<span class="line"><span style="color:#768390;">//获取&lt;T extends Double&gt; List&lt;Character&gt; test中的Double</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;"> { name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;test&quot;</span><span style="color:#ADBAC7;"> }.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">!!</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generics</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">argument</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//通过give获得KFunction，generics获取定义参数泛型列表并默认获取上界的类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到与 <code>Kotlin类</code> 获取泛型一样，并无区别，同样支持类似于 <code>Test::list</code> 的一键引用</p><h3 id="泛型匹配" tabindex="-1"><a class="header-anchor" href="#泛型匹配" aria-hidden="true">#</a> 泛型匹配</h3><p>在 <code>KFunctionFinder</code> 等查找器中关于类型的参数均支持泛型类型的传入匹配</p><p>与 <code>KCallable</code> 不同与 <code>KClass</code> 的 <code>generic</code>，<code>KClass</code> 是去构建一个泛型，<code>KCallable</code> 是对返回类型进行操作</p><p><code>KClass.generic</code> 操作的是 <code>class B&lt;T&gt;</code> 当前类与尖括号中的内容，默认情况下构建获得的是 <code>B&lt;*&gt;</code> 而 <code>KYukiReflection</code> 允许我们随意完善这个类型</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">B</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> def </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> B::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">()</span><span style="color:#768390;">// ---&gt; 这将获得 B&lt;*&gt;</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> thread </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> B::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(Thread::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">// --&gt; 这将获得B&lt;Thread&gt;</span></span>
<span class="line"><span style="color:#768390;">//或者你也可以更复杂的嵌套</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> list </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> B::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(List::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">))</span><span style="color:#768390;">// --&gt; 这将获得B&lt;List&lt;String&gt;&gt;</span></span>
<span class="line"><span style="color:#768390;">//以下能匹配是因为*允许匹配任意泛型 B&lt;*&gt; == B&lt;Thread&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">def </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> thread </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> def </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> list</span></span>
<span class="line"><span style="color:#768390;">//很明显，下面的泛型列表不一样，所以无法相等</span></span>
<span class="line"><span style="color:#ADBAC7;">thread </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">//我们可以考虑更进阶更细致的匹配</span></span>
<span class="line"><span style="color:#768390;">//我们为第一个泛型参数指定了方差为out</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> str </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> B::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">variance</span><span style="color:#ADBAC7;">(KVariance.OUT)) </span><span style="color:#768390;">// 这将获得B&lt;out String&gt;</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> str2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> B::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">variance</span><span style="color:#ADBAC7;">(KVariance.IN)) </span><span style="color:#768390;">// 这将获得B&lt;in String&gt;</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> str3 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> B::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">) </span><span style="color:#768390;">// 这将获得B&lt;String&gt;</span></span>
<span class="line"><span style="color:#768390;">//两个泛型同时包括方差时一定会检查并匹配方差很显然方差不一致匹配失败</span></span>
<span class="line"><span style="color:#ADBAC7;">str </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> str2</span></span>
<span class="line"><span style="color:#768390;">//默认情况下以左边是否有方差检测是否需要匹配方差，当左边没有方差时则只匹配类型</span></span>
<span class="line"><span style="color:#ADBAC7;">str3 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> str</span></span>
<span class="line"><span style="color:#768390;">//或者可以像下面这样任意一方明确了需要方差匹配</span></span>
<span class="line"><span style="color:#ADBAC7;">str3.</span><span style="color:#DCBDFB;">checkVariance</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> str </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> str3 </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> str.</span><span style="color:#DCBDFB;">checkVariance</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">//你也可以把可空性以及注解也一并考虑检查</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">C</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> test:</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;@</span><span style="color:#F69D50;">UnsafeVariance</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listType </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> B::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(C::</span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">()) </span><span style="color:#768390;">// 这将获得B&lt;List&lt;@UnsafeVariance Int&gt;?&gt;</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listType2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> B::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(List::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(Int::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)) </span><span style="color:#768390;">// 这将获得B&lt;List&lt;Int&gt;&gt;</span></span>
<span class="line"><span style="color:#768390;">//默认情况下他们是等价的</span></span>
<span class="line"><span style="color:#ADBAC7;">listType </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> listType2</span></span>
<span class="line"><span style="color:#768390;">//但任意一方开启检查，他们就会匹配失败</span></span>
<span class="line"><span style="color:#ADBAC7;">listType.</span><span style="color:#DCBDFB;">checkMarkedNullable</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> listType2 </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> listType </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> listType2.</span><span style="color:#DCBDFB;">checkMarkedNullable</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> listType.</span><span style="color:#DCBDFB;">checkAnnotation</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> listType2 </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> listType </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> listType2.</span><span style="color:#DCBDFB;">checkAnnotation</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了以上泛型的生成对比匹配的基本认识后就可以考虑在一系列查找器中使用</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Test</span><span style="color:#ADBAC7;">{</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">lateinit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> b:</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">lateinit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> c:</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">lateinit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> d:</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">out</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">p</span><span style="color:#ADBAC7;">(one:</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Double</span><span style="color:#ADBAC7;">&gt;){}</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">s</span><span style="color:#ADBAC7;">(one:</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Short</span><span style="color:#ADBAC7;">&gt;){}</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">//b是混淆的，准确通过类型获取混淆的属性可以像下面这样</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> { type </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> List::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">) } </span><span style="color:#768390;">// 非常简单</span></span>
<span class="line"><span style="color:#768390;">//或者从c和d中准确筛选</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> { type </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> List::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">variance</span><span style="color:#ADBAC7;">(KVariance.OUT)) } </span><span style="color:#768390;">// 获取d</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> { type </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> List::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(String::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">checkVariance</span><span style="color:#ADBAC7;">()) } </span><span style="color:#768390;">// 获取c</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;"> { </span><span style="color:#DCBDFB;">param</span><span style="color:#ADBAC7;">(List::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(Short::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)) } </span><span style="color:#768390;">// 获取s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>更多功能请参考 <a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kclass-generic-ext-method">KClass.generic</a>、<a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kclass-genericSuper-ext-method">KClass.genericSuper</a>、<a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kcallable-generic-ext-method">KCallable.generic</a> 方法。</p></div><h2 id="快速映射属性-函数" tabindex="-1"><a class="header-anchor" href="#快速映射属性-函数" aria-hidden="true">#</a> 快速映射属性/函数</h2><blockquote><p>这里是关于 Kotlin 类的属性绑定拓展功能和介绍。</p></blockquote><h3 id="bind进行绑定属性" tabindex="-1"><a class="header-anchor" href="#bind进行绑定属性" aria-hidden="true">#</a> bind进行绑定属性</h3><p>使用 <code>KYukiReflection</code> 可以轻松通过委托绑定某个 <code>属性</code> 减少反复书写简单属性的书写...</p><p>假设宿主有以下类 并且在模块中可以直接引用</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Test</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> param:</span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">mutableListOf</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">6</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> nullable:</span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">companion</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">object</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> static </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>bindProperty</code> 绑定属性可以快速绑定属性，支持 <code>var</code> 和 <code>val</code> 字段，只需要定义的属性名和类型即可</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建 Test 实例</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> instance </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Test</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">//通过以下方式快速绑定映射属性</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> name </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">bindProperty</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">&gt;(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> instance.name </span><span style="color:#768390;">// 这是等价的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> param:</span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Test</span><span style="color:#ADBAC7;">::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">bindProperty</span><span style="color:#ADBAC7;">(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">param.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">instance.param[</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;">// 这是等价的操作的是同一个对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> size </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">bindProperty</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">7</span><span style="color:#768390;">//支持var字段 此操作同时会修改 instance.size</span></span>
<span class="line"><span style="color:#768390;">// 你也可以绑定静态/对象属性，不需要实例</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> static:</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Test</span><span style="color:#ADBAC7;">.Companion::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">bindProperty</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> nullable </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">bindPropertyOrNull</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">&gt;(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">nullable?.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">() </span><span style="color:#768390;">// 对于可空属性可以使用bindPropertyOrNull</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上示例可以使用原始方式进行操作，但是通过 <code>bindProperty</code>、<code>bindPropertyOrNull</code> 可以减少重复书写</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建 Test 实例</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> instance </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Test</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> nameRes </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> { </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.type </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> String::</span><span style="color:#DCBDFB;">class</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">nameRes.</span><span style="color:#DCBDFB;">string</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> instance.name </span><span style="color:#768390;">// 这是等价的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> param </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;param&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.type </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MutableList::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(Int::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(instance).</span><span style="color:#DCBDFB;">cast</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;&gt;()</span><span style="color:#F47067;">!!</span></span>
<span class="line"><span style="color:#ADBAC7;">param.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">instance.param[</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;">// 这是等价的操作的是同一个对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> sizeRes </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;size&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.type </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Int::</span><span style="color:#DCBDFB;">class</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">sizeRes.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//支持var字段 此操作同时会修改 instance.size</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 你也可以绑定静态/对象属性，不需要实例</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> static </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Test.Companion::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;static&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.type </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Int::</span><span style="color:#DCBDFB;">class</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">int</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> nullableRes </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;nullable&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.type </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> String::</span><span style="color:#DCBDFB;">class</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(instance)</span></span>
<span class="line"><span style="color:#ADBAC7;">nullableRes.</span><span style="color:#DCBDFB;">cast</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">&gt;()?.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">() </span><span style="color:#768390;">// 稍显复杂</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于损坏的Kotlin类同样支持 <code>bindPropertySignature</code>、<code>bindPropertySignatureOrNull</code> 方法</p><p>了解了 <code>bindProperty</code> 后，即使 <code>Test</code> 无法在模块中直接调用我们也可以很轻松的把 <code>Test</code> 的模板做出来</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">kotlin.reflect.KClass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 将 Test 的实例作为 thisRef 传入</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">TestTemplate</span><span style="color:#ADBAC7;">(thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">companion</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">object</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">lateinit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> thisRefClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt; </span><span style="color:#768390;">// 通过自己的方式获取 Test 的Class</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> static </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> thisRefClass.</span><span style="color:#DCBDFB;">bindProperty</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> name </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> thisRefClass.</span><span style="color:#DCBDFB;">bindProperty</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">&gt;(thisRef)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> param </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> thisRefClass.</span><span style="color:#DCBDFB;">bindProperty</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;&gt;(thisRef)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> size </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> thisRefClass.</span><span style="color:#DCBDFB;">bindProperty</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;(thisRef)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> nullable </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> thisRefClass.</span><span style="color:#DCBDFB;">bindPropertyOrNull</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">&gt;(thisRef)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>更多功能请参考 <a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kclass-bindProperty-ext-method">KClass.bindProperty</a>、<a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kclass-bindPropertyOrNull-ext-method">KClass.bindPropertyOrNull</a>、<a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kclass-bindPropertySignature-ext-method">KClass.bindPropertySignature</a>、<a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kclass-bindPropertySignatureOrNull-ext-method">KClass.bindPropertySignatureOrNull</a> 方法。</p></div><h3 id="快速附加已知属性-函数到查找器" tabindex="-1"><a class="header-anchor" href="#快速附加已知属性-函数到查找器" aria-hidden="true">#</a> 快速附加已知属性/函数到查找器</h3><p>部分情况下我们已经有与需要查找的目标 <code>属性/函数</code> 大部分特征一样的另一个 <code>属性/函数</code> ，我们可以通过 <code>attach</code> 方法快速附加已知 <code>属性/函数</code> 到查找器</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">//宿主中假设有以下类</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Test</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> param:</span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">mutableListOf</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">(){</span><span style="color:#768390;">/*...*/</span><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">(param:</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;){</span><span style="color:#768390;">/*...*/</span><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">(){</span><span style="color:#768390;">/*...*/</span><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">//模块中创建与之类似的类</span></span>
<span class="line"><span style="color:#F47067;">interface</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">TestTemplate</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> param: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">(param:</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    TestTemplate::</span><span style="color:#DCBDFB;">param</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">attach</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> Test::</span><span style="color:#DCBDFB;">param</span><span style="color:#768390;">//这是等价的 相当于使用TestTemplate的属性名和属性类型在Test中查找</span></span>
<span class="line"><span style="color:#ADBAC7;">Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">attachEmptyParam</span><span style="color:#ADBAC7;">(TestTemplate::</span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">attach</span><span style="color:#ADBAC7;">(TestTemplate::</span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//attach默认优先匹配有一个及以上参数的函数</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">give</span><span style="color:#ADBAC7;">()</span><span style="color:#768390;">//遇到重载的函数如test时可以通过指定泛型列表来确定使用哪个进行附加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">//不过也有其他更轻便的方法，上述场景只是更换了 属性/函数 的所属KClass 那我们可以像下面这样</span></span>
<span class="line"><span style="color:#ADBAC7;">TestTemplate::</span><span style="color:#DCBDFB;">param</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKProperty</span><span style="color:#ADBAC7;">(Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//直接把TestTemplate的param转换为Test下的param</span></span>
<span class="line"><span style="color:#ADBAC7;">TestTemplate::</span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKFunction</span><span style="color:#ADBAC7;">(Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//直接把TestTemplate的run转换为Test下的run，这样就不需要attach了但是不适用于重载</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> test:</span><span style="color:#F69D50;">KFunction2</span><span style="color:#ADBAC7;">&lt;*,</span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">&gt;,</span><span style="color:#F69D50;">Unit</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TestTemplate::</span><span style="color:#DCBDFB;">test</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;">// 通过这样复杂的显示声明类型也可以指定获取但并不实用</span></span>
<span class="line"><span style="color:#ADBAC7;">test.</span><span style="color:#DCBDFB;">toKFunction</span><span style="color:#ADBAC7;">(Test::</span><span style="color:#DCBDFB;">class</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>更多功能请参考 <a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kcallable-toKCallable-ext-method">KCallable.toKCallable</a>、<a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kproperty-toKProperty-ext-method">KProperty.toKProperty</a>、<a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kfunction-toKFunction-ext-method">KFunction.toKFunction</a>、<a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KReflectionFactory#kpropertyfinder-attach-ext-method">KPropertyFinder.attach</a>、<a href="../api/public/io/github/dreammooncai/yukiReflection/factory/KFunctionAttachFactory#kfunctionfinder-attach-ext-method">KFunctionFinder.attach</a> 方法。</p></div>`,49),e=[o];function t(c,r){return n(),a("div",null,e)}const y=s(p,[["render",t],["__file","special.html.vue"]]);export{y as default};
