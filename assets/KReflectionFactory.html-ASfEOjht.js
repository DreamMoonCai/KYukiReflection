import{_ as s,o as a,c as n,a as l}from"./app-8qBaMd0v.js";const o={},e=l(`<h1 id="kreflectionfactory-kt" tabindex="-1"><a class="header-anchor" href="#kreflectionfactory-kt" aria-hidden="true">#</a> KReflectionFactory <span class="symbol">- kt</span></h1><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>这是自定义 <code>KClass</code> 和 <code>KCallable</code> 相关功能的查找匹配以及 <code>invoke</code> 的封装类。</p></blockquote><h2 id="klazyclass-class" tabindex="-1"><a class="header-anchor" href="#klazyclass-class" aria-hidden="true">#</a> KLazyClass <span class="symbol">- class</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">open</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KLazyClass</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F47067;">internal</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">constructor</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> instance: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> loader: </span><span style="color:#F69D50;">KClassLoaderInitializer</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>新增</code></p><p><strong>功能描述</strong></p><blockquote><p>懒装载 <code>KClass</code> 实例。</p></blockquote><h2 id="ktype-kotlin-ext-field" tabindex="-1"><a class="header-anchor" href="#ktype-kotlin-ext-field" aria-hidden="true">#</a> KType.kotlin <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KType.kotlin: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KType</code> 类型擦除转换为 <code>KClass</code></p></blockquote><h2 id="kclassifier-kotlin-ext-field" tabindex="-1"><a class="header-anchor" href="#kclassifier-kotlin-ext-field" aria-hidden="true">#</a> KClassifier.kotlin <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClassifier.kotlin: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KClassifier</code> 转换为 <code>KClass</code></p></blockquote><h2 id="kclass-top-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-top-ext-field" aria-hidden="true">#</a> KClass.top <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.top: </span><span style="color:#F69D50;">KDeclarationContainer</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KClass</code> 获取并转换为 *Kt 顶级 Kotlin 文件类</p></blockquote><h2 id="kclass-istop-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-istop-ext-field" aria-hidden="true">#</a> KClass.isTop <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isTop: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否是 *Kt 顶级 Kotlin 文件类</p></blockquote><h2 id="kclass-existtop-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-existtop-ext-field" aria-hidden="true">#</a> KClass.existTop <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.existTop: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否存在 *Kt 顶级 Kotlin 文件类</p></blockquote><h2 id="kdeclarationcontainer-kotlin-ext-field" tabindex="-1"><a class="header-anchor" href="#kdeclarationcontainer-kotlin-ext-field" aria-hidden="true">#</a> KDeclarationContainer.kotlin <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KDeclarationContainer.kotlin: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 *Kt 顶级 Kotlin 文件类 转换为 <code>KClass</code></p></blockquote><h2 id="kdeclarationcontainer-declaredtoppropertys-ext-field" tabindex="-1"><a class="header-anchor" href="#kdeclarationcontainer-declaredtoppropertys-ext-field" aria-hidden="true">#</a> KDeclarationContainer.declaredTopPropertys <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KDeclarationContainer.declaredTopPropertys: </span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;*&gt;&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 *Kt 顶级 Kotlin 文件类 的所有属性</p></blockquote><h2 id="kdeclarationcontainer-declaredtopfunctions-ext-field" tabindex="-1"><a class="header-anchor" href="#kdeclarationcontainer-declaredtopfunctions-ext-field" aria-hidden="true">#</a> KDeclarationContainer.declaredTopFunctions <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KDeclarationContainer.declaredTopFunctions: </span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">KFunction</span><span style="color:#ADBAC7;">&lt;*&gt;&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 *Kt 顶级 Kotlin 文件类 的所有函数</p></blockquote><h2 id="kparameter-kotlin-ext-field" tabindex="-1"><a class="header-anchor" href="#kparameter-kotlin-ext-field" aria-hidden="true">#</a> KParameter.kotlin <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KParameter.kotlin: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KParameter</code> 转换为 <code>KClass</code></p></blockquote><h2 id="collection-kotlin-ext-field" tabindex="-1"><a class="header-anchor" href="#collection-kotlin-ext-field" aria-hidden="true">#</a> Collection.kotlin <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> Collection</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KParameter</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.kotlin: </span><span style="color:#F69D50;">Array</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将一组 <code>KParameter</code> 擦除泛型转换为一组 <code>KClass</code></p></blockquote><blockquote><p>将 <code>KParameter</code> 转换为 <code>KClass</code></p></blockquote><h2 id="collection-type-ext-field" tabindex="-1"><a class="header-anchor" href="#collection-type-ext-field" aria-hidden="true">#</a> Collection.type <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> Collection</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KParameter</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.type: </span><span style="color:#F69D50;">Array</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">KType</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将一组 <code>KParameter</code> 保留泛型数据转换为一组 <code>KType</code></p></blockquote><h2 id="kproperty-tomutable-ext-field" tabindex="-1"><a class="header-anchor" href="#kproperty-tomutable-ext-field" aria-hidden="true">#</a> KProperty.toMutable <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KProperty</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">?.toMutable: </span><span style="color:#F69D50;">KMutableProperty</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KProperty</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">?.toMutableOrNull: </span><span style="color:#F69D50;">KMutableProperty</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将一组 <code>KProperty</code> 强行转换为 <code>KMutableProperty</code></p></blockquote><h2 id="kproperty-set-ext-method" tabindex="-1"><a class="header-anchor" href="#kproperty-set-ext-method" aria-hidden="true">#</a> KProperty.set <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KProperty</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, </span><span style="color:#F47067;">value</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, extensionRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">operator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KProperty</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, </span><span style="color:#F47067;">value</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>为 <code>KProperty</code> 修改值</p></blockquote><h2 id="kclass-issupportreflection-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-issupportreflection-ext-field" aria-hidden="true">#</a> KClass.isSupportReflection <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isSupportReflection: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否支持反射</p></blockquote><h2 id="kproperty-isvar-ext-field" tabindex="-1"><a class="header-anchor" href="#kproperty-isvar-ext-field" aria-hidden="true">#</a> KProperty.isVar <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KProperty</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isVar: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KProperty</code> 是否支持是由var关键字修饰的</p></blockquote><h2 id="kproperty-isval-ext-field" tabindex="-1"><a class="header-anchor" href="#kproperty-isval-ext-field" aria-hidden="true">#</a> KProperty.isVal <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KProperty</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isVal: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KProperty</code> 是否支持是由val关键字修饰的</p></blockquote><h2 id="kproperty-isnullable-ext-field" tabindex="-1"><a class="header-anchor" href="#kproperty-isnullable-ext-field" aria-hidden="true">#</a> KProperty.isNullable <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KProperty</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isNullable: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KProperty</code> 属性类型是否是可空类型</p></blockquote><h2 id="kproperty-isnotnull-ext-field" tabindex="-1"><a class="header-anchor" href="#kproperty-isnotnull-ext-field" aria-hidden="true">#</a> KProperty.isNotNull <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KProperty</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isNotNull: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KProperty</code> 属性类型是否是非空类型</p></blockquote><h2 id="kclass-isarrayorcollection-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-isarrayorcollection-ext-field" aria-hidden="true">#</a> KClass.isArrayOrCollection <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isArrayOrCollection: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否为数组或集合类型</p></blockquote><h2 id="kcallable-declaringclass-ext-field" tabindex="-1"><a class="header-anchor" href="#kcallable-declaringclass-ext-field" aria-hidden="true">#</a> KCallable.declaringClass <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.declaringClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KCallable</code> 的所属/声明类</p></blockquote><h2 id="kcallable-modifiers-ext-field" tabindex="-1"><a class="header-anchor" href="#kcallable-modifiers-ext-field" aria-hidden="true">#</a> KCallable.modifiers <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.modifiers: </span><span style="color:#F69D50;">Int</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KCallable</code> Java 能表示的首个描述符</p></blockquote><h2 id="kcallable-returnjavaclass-ext-field" tabindex="-1"><a class="header-anchor" href="#kcallable-returnjavaclass-ext-field" aria-hidden="true">#</a> KCallable.returnJavaClass <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt; KCallable</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">V</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.returnJavaClass: </span><span style="color:#F69D50;">Class</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KCallable</code> 返回类型 Java 形式</p></blockquote><h2 id="kcallable-returnclass-ext-field" tabindex="-1"><a class="header-anchor" href="#kcallable-returnclass-ext-field" aria-hidden="true">#</a> KCallable.returnClass <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt; KCallable</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">V</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.returnClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;"> &amp; </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KCallable</code> 返回类型</p></blockquote><h2 id="kcallable-ref-ext-field" tabindex="-1"><a class="header-anchor" href="#kcallable-ref-ext-field" aria-hidden="true">#</a> KCallable.ref <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.ref: </span><span style="color:#F69D50;">CallableReference</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KCallable</code> 转换为 <code>CallableReference</code> 静态引用类</p></blockquote><h2 id="kcallable-refclass-ext-field" tabindex="-1"><a class="header-anchor" href="#kcallable-refclass-ext-field" aria-hidden="true">#</a> KCallable.refClass <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.refClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过 <code>KCallable.ref</code> 静态引用类信息获取其声明所属 <code>KClass</code></p></blockquote><h2 id="kcallable-refimpl-ext-field" tabindex="-1"><a class="header-anchor" href="#kcallable-refimpl-ext-field" aria-hidden="true">#</a> KCallable.refImpl <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">KCallable</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt;&gt; K.refImpl: </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过 <code>KCallable.ref</code> 静态引用类信息获取其运行时 <code>K : KCallable</code></p></blockquote><h2 id="callablereference-impl-ext-field" tabindex="-1"><a class="header-anchor" href="#callablereference-impl-ext-field" aria-hidden="true">#</a> CallableReference.impl <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> CallableReference.impl: </span><span style="color:#F69D50;">KCallable</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过 <code>CallableReference</code> 静态引用类信息获取其运行时 <code>KCallable</code></p></blockquote><h2 id="callablereference-declaringkotlin-ext-field" tabindex="-1"><a class="header-anchor" href="#callablereference-declaringkotlin-ext-field" aria-hidden="true">#</a> CallableReference.declaringKotlin <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> CallableReference.declaringKotlin: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过 <code>CallableReference</code> 静态引用类信息获取其声明所属 <code>KClass</code></p></blockquote><h2 id="kclass-isinterface-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-isinterface-ext-field" aria-hidden="true">#</a> KClass.isInterface <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isInterface: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否为接口</p></blockquote><h2 id="kclass-superclass-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-superclass-ext-field" aria-hidden="true">#</a> KClass.superclass <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.superclass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 的非接口父类</p></blockquote><h2 id="kclass-enclosingclass-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-enclosingclass-ext-field" aria-hidden="true">#</a> KClass.enclosingClass <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.enclosingClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 的密封类</p></blockquote><h2 id="kclass-simplenameorjvm-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-simplenameorjvm-ext-field" aria-hidden="true">#</a> KClass.simpleNameOrJvm <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.simpleNameOrJvm: </span><span style="color:#F69D50;">String</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 的简易类名</p></blockquote><h2 id="kclass-isanonymous-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-isanonymous-ext-field" aria-hidden="true">#</a> KClass.isAnonymous <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isAnonymous: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否为匿名类</p></blockquote><h2 id="kclass-name-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-name-ext-field" aria-hidden="true">#</a> KClass.name <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.name: </span><span style="color:#F69D50;">String</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 完整类名</p></blockquote><h2 id="kclass-hasextends-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-hasextends-ext-field" aria-hidden="true">#</a> KClass.hasExtends <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.hasExtends: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否有继承 不考虑接口 继承为 <code>Any</code> 时算作没有继承</p></blockquote><h2 id="kclass-interfaces-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-interfaces-ext-field" aria-hidden="true">#</a> KClass.interfaces <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.interfaces: </span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 的所有接口</p></blockquote><h2 id="kclass-generics-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-generics-ext-field" aria-hidden="true">#</a> KClass.generics <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.generics: </span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">KTypeParameter</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 的泛型列表</p></blockquote><h2 id="kclass-generics-ext-field-1" tabindex="-1"><a class="header-anchor" href="#kclass-generics-ext-field-1" aria-hidden="true">#</a> KClass.generics <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.generics: </span><span style="color:#F69D50;">List</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">KTypeParameter</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KCallable</code> 的泛型列表</p></blockquote><h2 id="kclassifier-type-ext-field" tabindex="-1"><a class="header-anchor" href="#kclassifier-type-ext-field" aria-hidden="true">#</a> KClassifier.type <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClassifier.type: </span><span style="color:#F69D50;">KType</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KClassifier</code> 转换为 <code>KType</code></p></blockquote><h2 id="ktype-kotlintype-ext-field" tabindex="-1"><a class="header-anchor" href="#ktype-kotlintype-ext-field" aria-hidden="true">#</a> KType.kotlinType <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KType.kotlinType: </span><span style="color:#F69D50;">KotlinType</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KType</code> 转换为 <code>KotlinType</code></p></blockquote><h2 id="kclass-descriptor-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-descriptor-ext-field" aria-hidden="true">#</a> KClass.descriptor <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.descriptor: </span><span style="color:#F69D50;">ClassDescriptor</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 的描述符信息对象</p></blockquote><h2 id="kclass-isobject-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-isobject-ext-field" aria-hidden="true">#</a> KClass.isObject <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isObject: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否是 object 关键字修饰的对象类</p></blockquote><h2 id="kclass-isobject-ext-field-1" tabindex="-1"><a class="header-anchor" href="#kclass-isobject-ext-field-1" aria-hidden="true">#</a> KClass.isObject <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isObject: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否是 object 关键字修饰的对象类</p></blockquote><h2 id="kclass-singletoninstance-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-singletoninstance-ext-field" aria-hidden="true">#</a> KClass.singletonInstance <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt; KClass</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">T</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.singletonInstance: </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 的单例实例</p></blockquote><h2 id="kclass-companionsingletoninstance-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-companionsingletoninstance-ext-field" aria-hidden="true">#</a> KClass.companionSingletonInstance <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.companionSingletonInstance: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 的伴生对象实例</p></blockquote><h2 id="ktype-isprimitive-ext-field" tabindex="-1"><a class="header-anchor" href="#ktype-isprimitive-ext-field" aria-hidden="true">#</a> KType.isPrimitive <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KType.isPrimitive: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KType</code> 是否是 Java 基本数据类型</p></blockquote><h2 id="kclass-tojavaprimitivetype-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-tojavaprimitivetype-ext-method" aria-hidden="true">#</a> KClass.toJavaPrimitiveType <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toJavaPrimitiveType</span><span style="color:#ADBAC7;">(): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KClass</code> 的构成转换为基本数据类型构成</p></blockquote><p>转换基本类型对于KClass并没有太大影响 <code>Int::class == Int::class.toJavaPrimitiveType()</code> 这仅改变他们的构成，即 <code>Int::class.java != Int::class.toJavaPrimitiveType().java</code></p><h2 id="ktype-java-ext-field" tabindex="-1"><a class="header-anchor" href="#ktype-java-ext-field" aria-hidden="true">#</a> KType.java <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KType.java: </span><span style="color:#F69D50;">Class</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">out</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KType</code> 转换为 <code>Class</code></p></blockquote><h2 id="kcallable-findparameterindexbyname-ext-method" tabindex="-1"><a class="header-anchor" href="#kcallable-findparameterindexbyname-ext-method" aria-hidden="true">#</a> KCallable.findParameterIndexByName <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findParameterIndexByName</span><span style="color:#ADBAC7;">(name: </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">, isCountExtensionRef: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, isCountThisRef: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Int</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>根据参数名获取其 <code>KCallable</code> 中所在的下标</p></blockquote><h2 id="kclass-extends-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-extends-ext-method" aria-hidden="true">#</a> KClass.extends <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">?.</span><span style="color:#DCBDFB;">extends</span><span style="color:#ADBAC7;">(other: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否继承于 <code>other</code></p></blockquote><p>如果当前 <code>KClass</code> 就是 <code>other</code> 也会返回 <code>true</code>。</p><p>如果当前 <code>KClass</code> 为 <code>null</code> 或 <code>other</code> 为 <code>null</code> 会返回 <code>false</code>。</p><p><strong>功能示例</strong></p><p>你可以使用此方法来判断两个 <code>KClass</code> 是否存在继承关系。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设下面这两个 KClass 就是你需要判断的 KClass</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> classA: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> classB: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"><span style="color:#768390;">// 判断 A 是否继承于 B</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (classA extends classB) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kclass-notextends-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-notextends-ext-method" aria-hidden="true">#</a> KClass.notExtends <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">?.</span><span style="color:#DCBDFB;">notExtends</span><span style="color:#ADBAC7;">(other: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否不继承于 <code>other</code></p></blockquote><p>此方法相当于 <code>extends</code> 的反向判断。</p><p><strong>功能示例</strong></p><p>你可以使用此方法来判断两个 <code>KClass</code> 是否不存在继承关系。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设下面这两个 KClass 就是你需要判断的 KClass</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> classA: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> classB: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"><span style="color:#768390;">// 判断 A 是否不继承于 B</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (classA notExtends classB) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kclass-implements-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-implements-ext-method" aria-hidden="true">#</a> KClass.implements <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">?.</span><span style="color:#DCBDFB;">implements</span><span style="color:#ADBAC7;">(other: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否实现了 <code>other</code></p></blockquote><p>如果当前 <code>KClass</code> 为 <code>null</code> 或 <code>other</code> 为 <code>null</code> 会返回 <code>false</code>。</p><p><strong>功能示例</strong></p><p>你可以使用此方法来判断两个 <code>KClass</code> 是否存在依赖关系。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设下面这两个 KClass 就是你需要判断的 KClass</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> classA: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> classB: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"><span style="color:#768390;">// 判断 A 是否实现了 B 接口类</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (classA implements classB) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kclass-notimplements-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-notimplements-ext-method" aria-hidden="true">#</a> KClass.notImplements <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">?.</span><span style="color:#DCBDFB;">notImplements</span><span style="color:#ADBAC7;">(other: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KClass</code> 是否未实现 <code>other</code></p></blockquote><p>此方法相当于 <code>implements</code> 的反向判断。</p><p><strong>功能示例</strong></p><p>你可以使用此方法来判断两个 <code>KClass</code> 是否不存在依赖关系。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设下面这两个 KClass 就是你需要判断的 KClass</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> classA: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> classB: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"><span style="color:#768390;">// 判断 A 是否未实现 B 接口类</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (classA notImplements classB) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="any-iscase-ext-method" tabindex="-1"><a class="header-anchor" href="#any-iscase-ext-method" aria-hidden="true">#</a> Any.isCase <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">infix</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Any</span><span style="color:#ADBAC7;">?.</span><span style="color:#DCBDFB;">isCase</span><span style="color:#ADBAC7;">(other: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">Any</span><span style="color:#ADBAC7;">?.</span><span style="color:#DCBDFB;">isCase</span><span style="color:#ADBAC7;">(): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>Any</code> 是否可以转换为指定类型</p></blockquote><h2 id="kclass-classloader-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-classloader-ext-field" aria-hidden="true">#</a> KClass.classLoader <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.classLoader: </span><span style="color:#F69D50;">ClassLoader</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 使用的 <code>ClassLoader</code></p></blockquote><h2 id="kfunction-isgetter-ext-field" tabindex="-1"><a class="header-anchor" href="#kfunction-isgetter-ext-field" aria-hidden="true">#</a> KFunction.isGetter <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KFunction</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isGetter: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KFunction</code> 是否是 Getter 函数</p></blockquote><h2 id="kfunction-issetter-ext-field" tabindex="-1"><a class="header-anchor" href="#kfunction-issetter-ext-field" aria-hidden="true">#</a> KFunction.isSetter <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KFunction</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isSetter: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KFunction</code> 是否是 Setter 函数</p></blockquote><h2 id="kvariousclass-tokclass-ext-method" tabindex="-1"><a class="header-anchor" href="#kvariousclass-tokclass-ext-method" aria-hidden="true">#</a> KVariousClass.toKClass <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KVariousClass</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClass</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KVariousClass</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClassOrNull</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过 <code>KVariousClass</code> 获取 <code>KClass</code></p></blockquote><h2 id="string-tokclass-ext-method" tabindex="-1"><a class="header-anchor" href="#string-tokclass-ext-method" aria-hidden="true">#</a> String.toKClass <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClass</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClass</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> &amp; </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClassOrNull</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClassOrNull</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> &amp; </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt;?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过字符串类名转换为指定 <code>ClassLoader</code> 中的实体类</p></blockquote><p>带 OrNull 的版本找不到 <code>KClass</code> 会返回 <code>null</code>，不会抛出异常。</p><p><strong>功能示例</strong></p><p>你可以直接填写你要查找的目标 <code>KClass</code>，必须在默认 <code>ClassLoader</code> 下存在。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#96D0FF;">&quot;com.example.demo.DemoClass&quot;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClass</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你还可以自定义 <code>KClass</code> 所在的 <code>ClassLoader</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> customClassLoader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">..</span><span style="color:#ADBAC7;">. </span><span style="color:#768390;">// 假设这个就是你的 ClassLoader</span></span>
<span class="line"><span style="color:#96D0FF;">&quot;com.example.demo.DemoClass&quot;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClass</span><span style="color:#ADBAC7;">(customClassLoader)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以指定 <code>KClass</code> 的目标类型。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 指定的 DemoClass 必须存在或为可访问的 stub</span></span>
<span class="line"><span style="color:#96D0FF;">&quot;com.example.demo.DemoClass&quot;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClass</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">DemoClass</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以设置在获取到这个 <code>KClass</code> 时是否自动执行其默认的静态方法块，默认情况下不会执行。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 获取并执行 DemoClass 默认的静态方法块</span></span>
<span class="line"><span style="color:#96D0FF;">&quot;com.example.demo.DemoClass&quot;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClass</span><span style="color:#ADBAC7;">(initialize </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的静态方法块在 Java 中使用如下方式定义。</p><blockquote><p>示例如下</p></blockquote><div class="language-java" data-ext="java"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">DemoClass</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 这里是静态方法块的内容</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">DemoClass</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="kclass-tokclass-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-tokclass-ext-method" aria-hidden="true">#</a> KClass.toKClass <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClass</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">T &amp; Any</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClass</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> &amp; </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClassOrNull</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">T &amp; Any</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKClassOrNull</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> &amp; </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt;?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过 <code>KClass</code> 的类名使用指定 <code>ClassLoader</code> 转换为新的 <code>KClass</code></p></blockquote><h2 id="kcallable-tokcallable-ext-method" tabindex="-1"><a class="header-anchor" href="#kcallable-tokcallable-ext-method" aria-hidden="true">#</a> KCallable.toKCallable <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">KCallable</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt;, </span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKCallable</span><span style="color:#ADBAC7;">(clazz: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">K</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">KCallable</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt;, </span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKCallableOrNull</span><span style="color:#ADBAC7;">(clazz: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KCallable</code> 使用指定类与 <code>ClassLoader</code> 转换为新的 <code>KCallable</code></p></blockquote><h2 id="kproperty-tokproperty-ext-method" tabindex="-1"><a class="header-anchor" href="#kproperty-tokproperty-ext-method" aria-hidden="true">#</a> KProperty.toKProperty <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt;, </span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKProperty</span><span style="color:#ADBAC7;">(clazz: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">K</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt;, </span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKPropertyOrNull</span><span style="color:#ADBAC7;">(clazz: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KProperty</code> 使用指定类与 <code>ClassLoader</code> 转换为新的 <code>KProperty</code></p></blockquote><h2 id="kfunction-tokfunction-ext-method" tabindex="-1"><a class="header-anchor" href="#kfunction-tokfunction-ext-method" aria-hidden="true">#</a> KFunction.toKFunction <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">KFunction</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt;, </span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKFunction</span><span style="color:#ADBAC7;">(clazz: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">K</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">KFunction</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt;, </span><span style="color:#F69D50;">V</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toKFunctionOrNull</span><span style="color:#ADBAC7;">(clazz: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">K</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KFunction</code> 使用指定类与 <code>ClassLoader</code> 转换为新的 <code>KFunction</code></p></blockquote><h2 id="kclassof-method" tabindex="-1"><a class="header-anchor" href="#kclassof-method" aria-hidden="true">#</a> kclassOf <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">kclassOf</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> &amp; </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过 <code>T</code> 得到其 <code>KClass</code> 实例并转换为实体类。</p></blockquote><p><strong>功能示例</strong></p><p>我们要获取一个 <code>KClass</code> 在 Kotlin 下不通过反射时应该这样做。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">DemoClass::</span><span style="color:#DCBDFB;">class</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，你可以直接 <code>cast</code> 一个实例并获取它的 <code>KClass</code> 对象，必须在当前 <code>ClassLoader</code> 下存在。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kclassOf</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">DemoClass</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若目标存在的 <code>KClass</code> 为 <code>stub</code>，通过这种方式，你还可以自定义 <code>KClass</code> 所在的 <code>ClassLoader</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> customClassLoader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">..</span><span style="color:#ADBAC7;">. </span><span style="color:#768390;">// 假设这个就是你的 ClassLoader</span></span>
<span class="line"><span style="color:#DCBDFB;">kclassOf</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">DemoClass</span><span style="color:#ADBAC7;">&gt;(customClassLoader)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lazykclass-method" tabindex="-1"><a class="header-anchor" href="#lazykclass-method" aria-hidden="true">#</a> lazyKClass <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lazyKClass</span><span style="color:#ADBAC7;">(name: </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, loader: </span><span style="color:#F69D50;">KClassLoaderInitializer</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">KLazyClass</span><span style="color:#ADBAC7;">.NonNull</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Any</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">lazyKClass</span><span style="color:#ADBAC7;">(name: </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">noinline</span><span style="color:#ADBAC7;"> loader: </span><span style="color:#F69D50;">KClassLoaderInitializer</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">KLazyClass</span><span style="color:#ADBAC7;">.NonNull</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">T</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lazyKClass</span><span style="color:#ADBAC7;">(variousClass: </span><span style="color:#F69D50;">KVariousClass</span><span style="color:#ADBAC7;">, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, loader: </span><span style="color:#F69D50;">KClassLoaderInitializer</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">KLazyClass</span><span style="color:#ADBAC7;">.NonNull</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Any</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lazyKClassOrNull</span><span style="color:#ADBAC7;">(name: </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, loader: </span><span style="color:#F69D50;">KClassLoaderInitializer</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">KLazyClass</span><span style="color:#ADBAC7;">.Nullable</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Any</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">lazyKClassOrNull</span><span style="color:#ADBAC7;">(name: </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, loader: </span><span style="color:#F69D50;">KClassLoaderInitializer</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">KLazyClass</span><span style="color:#ADBAC7;">.Nullable</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">T</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lazyKClassOrNull</span><span style="color:#ADBAC7;">(variousClass: </span><span style="color:#F69D50;">KVariousClass</span><span style="color:#ADBAC7;">, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, loader: </span><span style="color:#F69D50;">KClassLoaderInitializer</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">KLazyClass</span><span style="color:#ADBAC7;">.Nullable</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Any</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>懒加载获取 <code>KClass</code></p></blockquote><h2 id="string-haskclass-ext-method" tabindex="-1"><a class="header-anchor" href="#string-haskclass-ext-method" aria-hidden="true">#</a> String.hasKClass <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasKClass</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过字符串类名使用指定的 <code>ClassLoader</code> 查找是否存在 <code>KClass</code></p></blockquote><p><strong>功能示例</strong></p><p>你可以轻松的使用此方法判断字符串中的类是否存在。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.demo.DemoClass&quot;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasKClass</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>填入方法中的 <code>loader</code> 参数可判断指定的 <code>ClassLoader</code> 中的 <code>KClass</code> 是否存在。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> customClassLoader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">..</span><span style="color:#ADBAC7;">. </span><span style="color:#768390;">// 假设这个就是你的 ClassLoader</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.demo.DemoClass&quot;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasKClass</span><span style="color:#ADBAC7;">(customClassLoader)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kclass-hasproperty-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-hasproperty-ext-method" aria-hidden="true">#</a> KClass.hasProperty <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasProperty</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KPropertyConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>查找在<code>KClass</code>中是否存在指定 <code>KProperty</code> 属性</p></blockquote><h2 id="kclass-haspropertysignature-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-haspropertysignature-ext-method" aria-hidden="true">#</a> KClass.hasPropertySignature <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasPropertySignature</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initiate: </span><span style="color:#F69D50;">KPropertySignatureConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>查找在<code>KClass</code>中是否存在指定 <code>KProperty</code> 属性签名</p></blockquote><h2 id="kclass-hasfunction-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-hasfunction-ext-method" aria-hidden="true">#</a> KClass.hasFunction <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasFunction</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KFunctionConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>查找在<code>KClass</code>中是否存在指定 <code>KFunction</code> 函数</p></blockquote><h2 id="kclass-hasfunctionsignature-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-hasfunctionsignature-ext-method" aria-hidden="true">#</a> KClass.hasFunctionSignature <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasFunctionSignature</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initiate: </span><span style="color:#F69D50;">KFunctionSignatureConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>查找在<code>KClass</code>中是否存在指定 <code>KFunction</code> 函数签名</p></blockquote><h2 id="kclass-hasconstructor-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-hasconstructor-ext-method" aria-hidden="true">#</a> KClass.hasConstructor <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasConstructor</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KConstructorConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>查找在<code>KClass</code>中是否存在指定 Constructor <code>KFunction</code> 构造函数</p></blockquote><h2 id="kcallable-hasmodifiers-ext-method" tabindex="-1"><a class="header-anchor" href="#kcallable-hasmodifiers-ext-method" aria-hidden="true">#</a> KCallable.hasModifiers <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasModifiers</span><span style="color:#ADBAC7;">(conditions: </span><span style="color:#F69D50;">KModifierConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查在 <code>KCallable</code> 中是否存在匹配的描述符</p></blockquote><h2 id="kclass-hasmodifiers-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-hasmodifiers-ext-method" aria-hidden="true">#</a> KClass.hasModifiers <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">hasModifiers</span><span style="color:#ADBAC7;">(conditions: </span><span style="color:#F69D50;">KModifierConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查在 <code>KClass</code> 中是否存在匹配的描述符</p></blockquote><h2 id="kclass-property-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-property-ext-method" aria-hidden="true">#</a> KClass.property <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KPropertyConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KPropertyFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 中的指定属性</p></blockquote><h2 id="kbasefinder-baseinstance-property-ext-method" tabindex="-1"><a class="header-anchor" href="#kbasefinder-baseinstance-property-ext-method" aria-hidden="true">#</a> KBaseFinder.BaseInstance.property <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KBaseFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">BaseInstance</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">property</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> args: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, initiate: </span><span style="color:#F69D50;">KPropertyConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KPropertyFinder</span><span style="color:#ADBAC7;">.Result.Instance</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>对已经查询的 <code>KBaseFinder.BaseInstance</code> 实例执行获取结果，对此结果再次查找其中属性</p></blockquote><h2 id="kclass-propertysignature-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-propertysignature-ext-method" aria-hidden="true">#</a> KClass.propertySignature <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">propertySignature</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initiate: </span><span style="color:#F69D50;">KPropertySignatureConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KPropertySignatureFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 中的指定的属性签名实例</p></blockquote><h2 id="kclass-function-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-function-ext-method" aria-hidden="true">#</a> KClass.function <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KFunctionConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KFunctionFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 中的指定函数</p></blockquote><h2 id="kbasefinder-baseinstance-function-ext-method" tabindex="-1"><a class="header-anchor" href="#kbasefinder-baseinstance-function-ext-method" aria-hidden="true">#</a> KBaseFinder.BaseInstance.function <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KBaseFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">BaseInstance</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">function</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> args: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, initiate: </span><span style="color:#F69D50;">KFunctionConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KFunctionFinder</span><span style="color:#ADBAC7;">.Result.Instance</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>对已经查询的 <code>KBaseFinder.BaseInstance</code> 实例执行获取结果，对此结果再次查找其中函数</p></blockquote><h2 id="kclass-functionsignature-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-functionsignature-ext-method" aria-hidden="true">#</a> KClass.functionSignature <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">functionSignature</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initiate: </span><span style="color:#F69D50;">KFunctionSignatureConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KFunctionSignatureFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 中的指定的函数签名实例</p></blockquote><h2 id="kclass-constructor-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-constructor-ext-method" aria-hidden="true">#</a> KClass.constructor <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">constructor</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KConstructorConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KConstructorFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 中的指定构造函数</p></blockquote><h2 id="kbasefinder-baseinstance-constructor-ext-method" tabindex="-1"><a class="header-anchor" href="#kbasefinder-baseinstance-constructor-ext-method" aria-hidden="true">#</a> KBaseFinder.BaseInstance.constructor <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KBaseFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">BaseInstance</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">constructor</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> args: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, initiate: </span><span style="color:#F69D50;">KConstructorConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KConstructorFinder</span><span style="color:#ADBAC7;">.Result.Instance</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>对已经查询的 <code>KBaseFinder.BaseInstance</code> 实例执行获取结果，对此结果再次查找其中构造函数</p></blockquote><h2 id="kclass-genericsuper-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-genericsuper-ext-method" aria-hidden="true">#</a> KClass.genericSuper <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">genericSuper</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KClassConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KGenericClass</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 的父类泛型操作对象</p></blockquote><h2 id="kclass-generic-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-generic-ext-method" aria-hidden="true">#</a> KClass.generic <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> params: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">, initiate: </span><span style="color:#F69D50;">KTypeBuildConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KGenericClass</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>使用指定泛型参数创建包含泛型信息的 <code>KClass</code> 泛型操作对象</p></blockquote><h2 id="kclass-variance-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-variance-ext-method" aria-hidden="true">#</a> KClass.variance <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">variance</span><span style="color:#ADBAC7;">(variance: </span><span style="color:#F69D50;">KVariance</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KTypeProjection</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>使用指定方差创建包含方差信息的 <code>KTypeProjection</code> 方差实例对象</p></blockquote><h2 id="kcallable-generics-ext-method" tabindex="-1"><a class="header-anchor" href="#kcallable-generics-ext-method" aria-hidden="true">#</a> KCallable.generics <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generics</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> params: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">,initiate: </span><span style="color:#F69D50;">KTypeBuildConditions</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {}): </span><span style="color:#F69D50;">KGenericClass</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KCallable</code> 定义的尖括号的泛型操作对象</p></blockquote><h2 id="kcallable-generic-ext-method" tabindex="-1"><a class="header-anchor" href="#kcallable-generic-ext-method" aria-hidden="true">#</a> KCallable.generic <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KGenericClassDomain</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KGenericClass</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KCallable</code> 返回类型的泛型操作对象</p></blockquote><h2 id="ktype-generic-ext-method" tabindex="-1"><a class="header-anchor" href="#ktype-generic-ext-method" aria-hidden="true">#</a> KType.generic <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KType</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KGenericClassDomain</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KGenericClass</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KType</code> 转换为泛型操作对象</p></blockquote><h2 id="ktype-genericbuild-ext-method" tabindex="-1"><a class="header-anchor" href="#ktype-genericbuild-ext-method" aria-hidden="true">#</a> KType.genericBuild <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KType</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">genericBuild</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> params: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">, initiate: </span><span style="color:#F69D50;">KTypeBuildConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KGenericClass</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>为当前 <code>KType</code> 附加指定泛型参数后转换为泛型操作对象</p></blockquote><h2 id="ktype-variance-ext-method" tabindex="-1"><a class="header-anchor" href="#ktype-variance-ext-method" aria-hidden="true">#</a> KType.variance <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KType</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">variance</span><span style="color:#ADBAC7;">(variance: </span><span style="color:#F69D50;">KVariance</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KTypeProjection</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>使用指定方差创建包含方差信息的 <code>KTypeProjection</code> 方差实例对象</p></blockquote><h2 id="collection-generic-ext-method" tabindex="-1"><a class="header-anchor" href="#collection-generic-ext-method" aria-hidden="true">#</a> Collection.generic <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Collection</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KType</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KClassConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KGenericClass</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将一组的 <code>KType</code> 指定其中一个转换为泛型操作对象</p></blockquote><h2 id="array-generic-ext-method" tabindex="-1"><a class="header-anchor" href="#array-generic-ext-method" aria-hidden="true">#</a> Array.generic <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Array</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KType</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">generic</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KClassConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KGenericClass</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将一组的 <code>KType</code> 指定其中一个转换为泛型操作对象</p></blockquote><h2 id="any-currentkotlin-ext-method" tabindex="-1"><a class="header-anchor" href="#any-currentkotlin-ext-method" aria-hidden="true">#</a> Any.currentKotlin <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">currentKotlin</span><span style="color:#ADBAC7;">(ignored: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KCurrentClass</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">currentKotlin</span><span style="color:#ADBAC7;">(ignored: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, initiate: </span><span style="color:#F69D50;">KCurrentClass</span><span style="color:#ADBAC7;">.() </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit): </span><span style="color:#F69D50;">T</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获得当前实例的类操作对象 Kotlin版本</p></blockquote><h2 id="kclass-buildof-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-buildof-ext-method" aria-hidden="true">#</a> KClass.buildOf <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">buildOf</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> args: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, initiate: </span><span style="color:#F69D50;">KConstructorConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">buildOf</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">vararg</span><span style="color:#ADBAC7;"> args: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, initiate: </span><span style="color:#F69D50;">KConstructorConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>通过构造方法创建新实例</p></blockquote><h2 id="kclass-declaredpropertys-ext-field" tabindex="-1"><a class="header-anchor" href="#kclass-declaredpropertys-ext-field" aria-hidden="true">#</a> KClass.declaredPropertys <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.declaredPropertys: </span><span style="color:#F69D50;">Collection</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;*&gt;&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KClass</code> 不包括父类的所有声明属性</p></blockquote><h2 id="kcallable-isextension-ext-field" tabindex="-1"><a class="header-anchor" href="#kcallable-isextension-ext-field" aria-hidden="true">#</a> KCallable.isExtension <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.isExtension: </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>检查 <code>KCallable</code> 是否是拓展函数</p></blockquote><h2 id="kcallable-descriptor-ext-field" tabindex="-1"><a class="header-anchor" href="#kcallable-descriptor-ext-field" aria-hidden="true">#</a> KCallable.descriptor <span class="symbol">- ext-field</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> KCallable</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.descriptor: </span><span style="color:#F69D50;">CallableMemberDescriptor</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>获取 <code>KCallable</code> 描述信息实例</p></blockquote><h2 id="kclass-allfunctions-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-allfunctions-ext-method" aria-hidden="true">#</a> KClass.allFunctions <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">allFunctions</span><span style="color:#ADBAC7;">(isAccessible: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, result: (</span><span style="color:#F69D50;">index</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">function</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">KFunction</span><span style="color:#ADBAC7;">&lt;*&gt;) -&gt; </span><span style="color:#F69D50;">Unit</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>遍历 <code>KClass</code> 的所有函数</p></blockquote><h2 id="kclass-allfunctionsignatures-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-allfunctionsignatures-ext-method" aria-hidden="true">#</a> KClass.allFunctionSignatures <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">allFunctionSignatures</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, result: (</span><span style="color:#F69D50;">index</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">function</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">KFunctionSignatureSupport</span><span style="color:#ADBAC7;">) -&gt; </span><span style="color:#F69D50;">Unit</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>遍历 <code>KClass</code> 的所有函数签名</p></blockquote><h2 id="kclass-allconstructors-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-allconstructors-ext-method" aria-hidden="true">#</a> KClass.allConstructors <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">allConstructors</span><span style="color:#ADBAC7;">(isAccessible: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, result: (</span><span style="color:#F69D50;">index</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">function</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">KFunction</span><span style="color:#ADBAC7;">&lt;*&gt;) -&gt; </span><span style="color:#F69D50;">Unit</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>遍历 <code>KClass</code> 的所有构造函数</p></blockquote><h2 id="kclass-allpropertys-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-allpropertys-ext-method" aria-hidden="true">#</a> KClass.allPropertys <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">allPropertys</span><span style="color:#ADBAC7;">(isAccessible: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, result: (</span><span style="color:#F69D50;">index</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">property</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;*&gt;) -&gt; </span><span style="color:#F69D50;">Unit</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>遍历 <code>KClass</code> 的所有属性</p></blockquote><h2 id="kclass-allpropertysignatures-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-allpropertysignatures-ext-method" aria-hidden="true">#</a> KClass.allPropertySignatures <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">allPropertySignatures</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, result: (</span><span style="color:#F69D50;">index</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">property</span><span style="color:#ADBAC7;">: </span><span style="color:#F69D50;">KPropertySignatureSupport</span><span style="color:#ADBAC7;">) -&gt; </span><span style="color:#F69D50;">Unit</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>遍历 <code>KClass</code> 的所有属性签名</p></blockquote><h2 id="collection-findclass-ext-method" tabindex="-1"><a class="header-anchor" href="#collection-findclass-ext-method" aria-hidden="true">#</a> Collection.findClass <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Collection</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KClass</span><span style="color:#F47067;">&lt;*&gt;&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findClass</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KClassConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClassFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Collection</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findClass</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, initiate: </span><span style="color:#F69D50;">KClassConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClassFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Collection</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KType</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findClass</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KClassConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClassFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>在集合中查找或筛选 <code>KClass</code></p></blockquote><h2 id="array-findclass-ext-method" tabindex="-1"><a class="header-anchor" href="#array-findclass-ext-method" aria-hidden="true">#</a> Array.findClass <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Array</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KClass</span><span style="color:#F47067;">&lt;*&gt;&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findClass</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KClassConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClassFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Array</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findClass</span><span style="color:#ADBAC7;">(loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, initialize: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">, initiate: </span><span style="color:#F69D50;">KClassConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClassFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Array</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KType</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findClass</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">KClassConditions</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KClassFinder</span><span style="color:#ADBAC7;">.Result</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>在数组中查找或筛选 <code>KClass</code></p></blockquote><h2 id="collection-findtype-ext-method" tabindex="-1"><a class="header-anchor" href="#collection-findtype-ext-method" aria-hidden="true">#</a> Collection.findType <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Collection</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KType</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findType</span><span style="color:#ADBAC7;">(classSet: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?): </span><span style="color:#F69D50;">KType</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">Collection</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KType</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findType</span><span style="color:#ADBAC7;">(): </span><span style="color:#F69D50;">KType</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>在集合中查找 <code>KType</code></p></blockquote><h2 id="array-findtype-ext-method" tabindex="-1"><a class="header-anchor" href="#array-findtype-ext-method" aria-hidden="true">#</a> Array.findType <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Array</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KType</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findType</span><span style="color:#ADBAC7;">(classSet: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;?): </span><span style="color:#F69D50;">KType</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">reified</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">Array</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">KType</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">findType</span><span style="color:#ADBAC7;">(): </span><span style="color:#F69D50;">KType</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>在数组中查找 <code>KType</code></p></blockquote><h2 id="kfunction-instance-ext-method" tabindex="-1"><a class="header-anchor" href="#kfunction-instance-ext-method" aria-hidden="true">#</a> KFunction.instance <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KFunction</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">instance</span><span style="color:#ADBAC7;">(thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, extensionRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KFunctionFinder</span><span style="color:#ADBAC7;">.Result.Instance</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KFunction</code> 转换为 <code>KFunctionFinder.Result.Instance</code> 可执行类</p></blockquote><h2 id="kfunction-constructor-ext-method" tabindex="-1"><a class="header-anchor" href="#kfunction-constructor-ext-method" aria-hidden="true">#</a> KFunction.constructor <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KFunction</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">constructor</span><span style="color:#ADBAC7;">(isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KConstructorFinder</span><span style="color:#ADBAC7;">.Result.Instance</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 Constructor<code>KFunction</code> 转换为 <code>KConstructorFinder.Result.Instance</code> 可执行类</p></blockquote><h2 id="kproperty-instance-ext-method" tabindex="-1"><a class="header-anchor" href="#kproperty-instance-ext-method" aria-hidden="true">#</a> KProperty.instance <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">KProperty</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">instance</span><span style="color:#ADBAC7;">(thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, extensionRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">KPropertyFinder</span><span style="color:#ADBAC7;">.Result.Instance</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将 <code>KProperty</code> 转换为 <code>KPropertyFinder.Result.Instance</code> 可执行类</p></blockquote><h2 id="kconstructorfinder-attach-ext-method" tabindex="-1"><a class="header-anchor" href="#kconstructorfinder-attach-ext-method" aria-hidden="true">#</a> KConstructorFinder.attach <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">KConstructorFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">attach</span><span style="color:#ADBAC7;">(function: </span><span style="color:#F69D50;">KFunction</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">&gt;, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将构造函数<code>KFunction</code>相关内容附加到<code>KConstructorFinder</code>中。</p></blockquote><h2 id="kpropertyfinder-attach-ext-method" tabindex="-1"><a class="header-anchor" href="#kpropertyfinder-attach-ext-method" aria-hidden="true">#</a> KPropertyFinder.attach <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">KPropertyFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">attach</span><span style="color:#ADBAC7;">(property: </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">&gt;, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">KPropertyFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">attachStatic</span><span style="color:#ADBAC7;">(property: </span><span style="color:#F69D50;">KProperty0</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">&gt;, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">ExpandThis</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">KPropertyFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">attach</span><span style="color:#ADBAC7;">(property: </span><span style="color:#F69D50;">KProperty2</span><span style="color:#ADBAC7;">&lt;*, </span><span style="color:#F69D50;">ExpandThis</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">&gt;, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将属性<code>KProperty</code>相关内容附加到<code>KPropertyFinder</code>中。</p></blockquote><h2 id="bindinginstancesupport-class" tabindex="-1"><a class="header-anchor" href="#bindinginstancesupport-class" aria-hidden="true">#</a> BindingInstanceSupport <span class="symbol">- class</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">open</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">BindingInstanceSupport</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt;(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> thisRefClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> extensionRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isLazy: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mappingRules: </span><span style="color:#F69D50;">KPropertyFinder</span><span style="color:#ADBAC7;">.(property: </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;*&gt;) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>新增</code></p><p><strong>功能描述</strong></p><blockquote><p>委托绑定映射 <code> KProperty</code> 实例。</p></blockquote><h2 id="kclass-bindproperty-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-bindproperty-ext-method" aria-hidden="true">#</a> KClass.bindProperty <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">bindProperty</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?,</span></span>
<span class="line"><span style="color:#ADBAC7;">    extensionRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?,</span></span>
<span class="line"><span style="color:#ADBAC7;">    isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    isLazy: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    mappingRules: </span><span style="color:#F69D50;">KPropertyFinder</span><span style="color:#ADBAC7;">.(property: </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;*&gt;) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit</span></span>
<span class="line"><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">BindingInstanceSupport</span><span style="color:#ADBAC7;">.NonNull</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">T</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">bindPropertyOrNull</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?,</span></span>
<span class="line"><span style="color:#ADBAC7;">    extensionRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?,</span></span>
<span class="line"><span style="color:#ADBAC7;">    isUseMember: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    isLazy: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    mappingRules: </span><span style="color:#F69D50;">KPropertyFinder</span><span style="color:#ADBAC7;">.(property: </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;*&gt;) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit</span></span>
<span class="line"><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">BindingInstanceSupport</span><span style="color:#ADBAC7;">.Nullable</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">T</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>与指定 <code>KProperty</code> 取得/绑定映射关系</p></blockquote><h2 id="bindinginstancesignaturesupport-class" tabindex="-1"><a class="header-anchor" href="#bindinginstancesignaturesupport-class" aria-hidden="true">#</a> BindingInstanceSignatureSupport <span class="symbol">- class</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">open</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">BindingInstanceSignatureSupport</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt;(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> thisRefClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> declaringClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isLazy: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mappingRules: </span><span style="color:#F69D50;">KPropertySignatureFinder</span><span style="color:#ADBAC7;">.(property: </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;*&gt;) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>新增</code></p><p><strong>功能描述</strong></p><blockquote><p>委托绑定映射 <code> KPropertySignature</code> 实例。</p></blockquote><h2 id="kclass-bindpropertysignature-ext-method" tabindex="-1"><a class="header-anchor" href="#kclass-bindpropertysignature-ext-method" aria-hidden="true">#</a> KClass.bindPropertySignature <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">bindPropertySignature</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?,</span></span>
<span class="line"><span style="color:#ADBAC7;">    declaringClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    isLazy: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    mappingRules: </span><span style="color:#F69D50;">KPropertySignatureFinder</span><span style="color:#ADBAC7;">.(property: </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;*&gt;) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit</span></span>
<span class="line"><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">BindingInstanceSupport</span><span style="color:#ADBAC7;">.NonNull</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">T</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> &lt;</span><span style="color:#F69D50;">T</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">KClass</span><span style="color:#F47067;">&lt;*&gt;</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">bindPropertySignatureOrNull</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    thisRef: </span><span style="color:#F69D50;">Any</span><span style="color:#ADBAC7;">?,</span></span>
<span class="line"><span style="color:#ADBAC7;">    declaringClass: </span><span style="color:#F69D50;">KClass</span><span style="color:#ADBAC7;">&lt;*&gt;? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">? </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    isLazy: </span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    mappingRules: </span><span style="color:#F69D50;">KPropertySignatureFinder</span><span style="color:#ADBAC7;">.(property: </span><span style="color:#F69D50;">KProperty</span><span style="color:#ADBAC7;">&lt;*&gt;) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit</span></span>
<span class="line"><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">BindingInstanceSupport</span><span style="color:#ADBAC7;">.Nullable</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">T</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>与指定 <code>KPropertySignature</code> 取得/绑定映射关系</p></blockquote>`,782),p=[e];function t(c,r){return a(),n("div",null,p)}const i=s(o,[["render",t],["__file","KReflectionFactory.html.vue"]]);export{i as default};
