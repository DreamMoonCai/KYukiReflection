import{_ as a,r as s,o as d,c,b as e,d as t,e as n,a as i}from"./app-8qBaMd0v.js";const l={},r=i('<h1 id="changelog" tabindex="-1"><a class="header-anchor" href="#changelog" aria-hidden="true">#</a> Changelog</h1><blockquote><p>The version update history of <code>KYukiReflection</code> is recorded here.</p></blockquote><div class="custom-container danger"><p class="custom-container-title">Pay Attention</p><p>We will only maintain the latest API version, if you are using an outdate API version, you voluntarily renounce any possibility of maintenance.</p></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>To avoid translation time consumption, Changelog will use <strong>Google Translation</strong> from <strong>Chinese</strong> to <strong>English</strong>, please refer to the original text for actual reference.</p><p>Time zone of version release date: <strong>UTC+8</strong></p></div>',4),h={id:"_1-0-2-2024-6-29",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#_1-0-2-2024-6-29","aria-hidden":"true"},"#",-1),p=i("<ul><li>For real-world use cases, we&#39;ve added methods such as <code>singletonInstance</code> and <code>companionSingletonInstance</code> to quickly fetch singleton and object class instances</li><li>When using the <code>bindProperty()</code> method to delegate binding, if the bound property <code>this</code> is the same as the <code>Class</code> type, you don&#39;t need to pass <code>thisRef</code>, and the <code>this</code> in the domain will be automatically used</li><li>When using <code>Kotlin</code> reflection lookup to get a function, property that is an object class or a singleton class member, you don&#39;t need to pass in <code>thisRef</code> and the relevant example will be used automatically</li><li>Added a signature lookup method for the <code>Kotlin</code> class with metadata exceptions, and only read the metadata of the <code>Class</code> to find the corresponding data to avoid exceptions</li><li>Adding an <code>original</code> function to the result instance of the lookup allows calls to be made about things that don&#39;t have a <code>Hook</code>, although this only works if there&#39;s a <code>HookAPI</code></li><li>Add the <code>function</code> lookup result instance or the <code>property</code> lookup result instance or lookup instance of <code>getter</code> or <code>setter</code> can be directly obtained in the lookup instance</li><li>Added <code>KFunction</code> and <code>KProperty</code> to convert them into search result instances by using the <code>instance</code> method</li><li>Optimized the degree of reflection finding and matching adaptation of <code>Kotlin</code></li><li>For more information, please optimize the details in use</li></ul>",1),g={id:"_1-0-0-2023-01-26",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#_1-0-0-2023-01-26","aria-hidden":"true"},"#",-1),f=e("ul",null,[e("li",null,"The first version is submitted to Maven")],-1);function _(y,v){const o=s("Badge");return d(),c("div",null,[r,e("h3",h,[u,t(" 1.0.2 | 2024.6.29  "),n(o,{type:"tip",text:"最新",vertical:"middle"})]),p,e("h3",g,[m,t(" 1.0.0 | 2023.01.26  "),n(o,{type:"warning",text:"stale",vertical:"middle"})]),f])}const k=a(l,[["render",_],["__file","changelog.html.vue"]]);export{k as default};
