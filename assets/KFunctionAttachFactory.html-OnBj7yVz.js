import{_ as s,o as a,c as n,a as o}from"./app-8qBaMd0v.js";const t={},e=o(`<h1 id="kfunctionattachfactory-kt" tabindex="-1"><a class="header-anchor" href="#kfunctionattachfactory-kt" aria-hidden="true">#</a> KFunctionAttachFactory <span class="symbol">- kt</span></h1><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>用于<code>KFunction</code>的查找附加拓展的封装类。</p></blockquote><h2 id="kfunctionfinder-attach-ext-method" tabindex="-1"><a class="header-anchor" href="#kfunctionfinder-attach-ext-method" aria-hidden="true">#</a> KFunctionFinder.attach <span class="symbol">- ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KFunctionFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">attach</span><span style="color:#ADBAC7;">(function: </span><span style="color:#F69D50;">KFunction</span><span style="color:#ADBAC7;">, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember:</span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KFunctionFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">attachStatic</span><span style="color:#ADBAC7;">(function: </span><span style="color:#F69D50;">KFunction</span><span style="color:#ADBAC7;">, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember:</span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KFunctionFinder</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">attachEmptyParam</span><span style="color:#ADBAC7;">(function: </span><span style="color:#F69D50;">KFunction</span><span style="color:#ADBAC7;">, loader: </span><span style="color:#F69D50;">ClassLoader</span><span style="color:#ADBAC7;">?, isUseMember:</span><span style="color:#F69D50;">Boolean</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Unit</span></span>
<span class="line"></span></code></pre></div><p><strong>变更记录</strong></p><p><code>v1.0.0</code> <code>添加</code></p><p><strong>功能描述</strong></p><blockquote><p>将函数<code>KFunction</code>相关内容附加到<code>KFunctionFinder</code>中。 <code>attach</code> 重载筛选不同参数的函数，最后一个泛型永远是返回类型。</p></blockquote>`,13),c=[e];function l(p,r){return a(),n("div",null,c)}const d=s(t,[["render",l],["__file","KFunctionAttachFactory.html.vue"]]);export{d as default};
